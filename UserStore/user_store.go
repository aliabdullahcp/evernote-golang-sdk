// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package UserStore

import (
	"context"
	// "fmt"
	"fmt"
	"github.com/aliabdullahcp/evernote-golang-sdk/Errors"
	"github.com/aliabdullahcp/evernote-golang-sdk/Types"
	"github.com/apache/thrift/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = Types.GoUnusedProtection__
var _ = Errors.GoUnusedProtection__

type UserStore interface { //Service:  UserStore
	//<p>
	//The UserStore service is primarily used by EDAM clients to establish
	//authentication via username and password over a trusted connection (e.g.
	//SSL).  A client's first call to this interface should be checkVersion() to
	//ensure that the client's software is up to date.
	//</p>
	//All calls which require an authenticationToken may throw an
	//EDAMUserException for the following reasons:
	// <ul>
	//  <li> AUTH_EXPIRED "authenticationToken" - token has expired
	//  <li> BAD_DATA_FORMAT "authenticationToken" - token is malformed
	//  <li> DATA_REQUIRED "authenticationToken" - token is empty
	//  <li> INVALID_AUTH "authenticationToken" - token signature is invalid
	//</ul>

	// This should be the first call made by a client to the EDAM service.  It
	// tells the service what protocol version is used by the client.  The
	// service will then return true if the client is capable of talking to
	// the service, and false if the client's protocol version is incompatible
	// with the service, so the client must upgrade.  If a client receives a
	// false value, it should report the incompatibility to the user and not
	// continue with any more EDAM requests (UserStore or NoteStore).
	//
	// @param clientName
	//   This string provides some information about the client for
	//   tracking/logging on the service.  It should provide information about
	//   the client's software and platform. The structure should be:
	//   application/version; platform/version; [ device/version ]
	//   E.g. "Evernote Windows/3.0.1; Windows/XP SP3".
	//
	// @param edamVersionMajor
	//   This should be the major protocol version that was compiled by the
	//   client.  This should be the current value of the EDAM_VERSION_MAJOR
	//   constant for the client.
	//
	// @param edamVersionMinor
	//   This should be the major protocol version that was compiled by the
	//   client.  This should be the current value of the EDAM_VERSION_MINOR
	//   constant for the client.
	//
	// Parameters:
	//  - ClientName
	//  - EdamVersionMajor
	//  - EdamVersionMinor
	CheckVersion(clientName string, edamVersionMajor int16, edamVersionMinor int16) (r bool, err error)
	// This provides bootstrap information to the client. Various bootstrap
	// profiles and settings may be used by the client to configure itself.
	//
	// @param locale
	//   The client's current locale, expressed in language[_country]
	//   format. E.g., "en_US". See ISO-639 and ISO-3166 for valid
	//   language and country codes.
	//
	// @return
	//   The bootstrap information suitable for this client.
	//
	// Parameters:
	//  - Locale
	GetBootstrapInfo(locale string) (r *BootstrapInfo, err error)
	// This is used to check a username and password in order to create a
	// short-lived authentication session that can be used for further actions.
	//
	// This function is only available to Evernote's internal applications.
	// Third party applications must authenticate using OAuth as
	// described at
	// <a href="http://dev.evernote.com/documentation/cloud/">dev.evernote.com</a>.
	//
	// @param username
	//   The username (not numeric user ID) for the account to
	//   authenticate against.  This function will also accept the user's
	//   registered email address in this parameter.
	//
	// @param password
	//   The plaintext password to check against the account.  Since
	//   this is not protected by the EDAM protocol, this information must be
	//   provided over a protected transport (e.g. SSL).
	//
	// @param consumerKey
	//   The "consumer key" portion of the API key issued to the client application
	//   by Evernote.
	//
	// @param consumerSecret
	//   The "consumer secret" portion of the API key issued to the client application
	//   by Evernote.
	//
	// @param supportsTwoFactor
	//   Whether the calling application supports two-factor authentication. If this
	//   parameter is false, this method will fail with the error code INVALID_AUTH and the
	//   parameter "password" when called for a user who has enabled two-factor
	//   authentication.
	//
	// @return
	//   <p>The result of the authentication.  If the authentication was successful,
	//   the AuthenticationResult.user field will be set with the full information
	//   about the User.</p>
	//   <p>If the user has two-factor authentication enabled,
	//   AuthenticationResult.secondFactorRequired will be set and
	//   AuthenticationResult.authenticationToken will contain a short-lived token
	//   that may only be used to complete the two-factor authentication process by calling
	//   UserStore.completeTwoFactorAuthentication.</p>
	//
	// @throws EDAMUserException <ul>
	//   <li> DATA_REQUIRED "username" - username is empty
	//   <li> DATA_REQUIRED "password" - password is empty
	//   <li> DATA_REQUIRED "consumerKey" - consumerKey is empty
	//   <li> INVALID_AUTH "username" - username not found
	//   <li> INVALID_AUTH "password" - password did not match
	//   <li> INVALID_AUTH "consumerKey" - consumerKey is not authorized
	//   <li> INVALID_AUTH "consumerSecret" - consumerSecret is incorrect
	//   <li> PERMISSION_DENIED "User.active" - user account is closed
	//   <li> PERMISSION_DENIED "User.tooManyFailuresTryAgainLater" - user has
	//     failed authentication too often
	// </ul>
	//
	// Parameters:
	//  - Username
	//  - Password
	//  - ConsumerKey
	//  - ConsumerSecret
	//  - SupportsTwoFactor
	Authenticate(ctx context.Context, username string, password string, consumerKey string, consumerSecret string, supportsTwoFactor bool) (r *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// This is used to check a username and password in order to create a
	// long-lived authentication token that can be used for further actions.
	//
	// This function is not available to most third party applications,
	// which typically authenticate using OAuth as
	// described at
	// <a href="http://dev.evernote.com/documentation/cloud/">dev.evernote.com</a>.
	// If you believe that your application requires permission to authenticate
	// using username and password instead of OAuth, please contact Evernote
	// developer support by visiting
	// <a href="http://dev.evernote.com">dev.evernote.com</a>.
	//
	// @param username
	//   The username or registered email address of the account to
	//   authenticate against.
	//
	// @param password
	//   The plaintext password to check against the account.  Since
	//   this is not protected by the EDAM protocol, this information must be
	//   provided over a protected transport (i.e. SSL).
	//
	// @param consumerKey
	//   The "consumer key" portion of the API key issued to the client application
	//   by Evernote.
	//
	// @param consumerSecret
	//   The "consumer secret" portion of the API key issued to the client application
	//   by Evernote.
	//
	// @param deviceIdentifier
	//   An optional string, no more than 32 characters in length, that uniquely identifies
	//   the device from which the authentication is being performed. This string allows
	//   the service to return the same authentication token when a given application
	//   requests authentication repeatedly from the same device. This may happen when the
	//   user logs out of an application and then logs back in, or when the application is
	//   uninstalled and later reinstalled. If no reliable device identifier can be created,
	//   this value should be omitted. If set, the device identifier must be between
	//   1 and EDAM_DEVICE_ID_LEN_MAX characters long and must match the regular expression
	//   EDAM_DEVICE_ID_REGEX.
	//
	// @param deviceDescription
	//   A description of the device from which the authentication is being performed.
	//   This field is displayed to the user in a list of authorized applications to
	//   allow them to distinguish between multiple tokens issued to the same client
	//   application on different devices. For example, the Evernote iOS client on
	//   a user's iPhone and iPad might pass the iOS device names "Bob's iPhone" and
	//   "Bob's iPad". The device description must be between 1 and
	//   EDAM_DEVICE_DESCRIPTION_LEN_MAX characters long and must match the regular
	//   expression EDAM_DEVICE_DESCRIPTION_REGEX.
	//
	// @param supportsTwoFactor
	//   Whether the calling application supports two-factor authentication. If this
	//   parameter is false, this method will fail with the error code INVALID_AUTH and the
	//   parameter "password" when called for a user who has enabled two-factor
	//   authentication.
	//
	// @return
	//   <p>The result of the authentication. The level of detail provided in the returned
	//   AuthenticationResult.User structure depends on the access level granted by
	//   calling application's API key.</p>
	//   <p>If the user has two-factor authentication enabled,
	//   AuthenticationResult.secondFactorRequired will be set and
	//   AuthenticationResult.authenticationToken will contain a short-lived token
	//   that may only be used to complete the two-factor authentication process by calling
	//   UserStore.completeTwoFactorAuthentication.</p>
	//
	// @throws EDAMUserException <ul>
	//   <li> DATA_REQUIRED "username" - username is empty
	//   <li> DATA_REQUIRED "password" - password is empty
	//   <li> DATA_REQUIRED "consumerKey" - consumerKey is empty
	//   <li> DATA_REQUIRED "consumerSecret" - consumerSecret is empty
	//   <li> DATA_REQUIRED "deviceDescription" - deviceDescription is empty
	//   <li> BAD_DATA_FORMAT "deviceDescription" - deviceDescription is not valid.
	//   <li> BAD_DATA_FORMAT "deviceIdentifier" - deviceIdentifier is not valid.
	//   <li> INVALID_AUTH "username" - username not found
	//   <li> INVALID_AUTH "password" - password did not match
	//   <li> INVALID_AUTH "consumerKey" - consumerKey is not authorized
	//   <li> INVALID_AUTH "consumerSecret" - consumerSecret is incorrect
	//   <li> PERMISSION_DENIED "User.active" - user account is closed
	//   <li> PERMISSION_DENIED "User.tooManyFailuresTryAgainLater" - user has
	//     failed authentication too often
	// </ul>
	//
	// Parameters:
	//  - Username
	//  - Password
	//  - ConsumerKey
	//  - ConsumerSecret
	//  - DeviceIdentifier
	//  - DeviceDescription
	//  - SupportsTwoFactor
	AuthenticateLongSession(ctx context.Context, username string, password string, consumerKey string, consumerSecret string, deviceIdentifier string, deviceDescription string, supportsTwoFactor bool) (r *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Complete the authentication process when a second factor is required. This
	// call is made after a successful call to authenticate or authenticateLongSession
	// when the authenticating user has enabled two-factor authentication.
	//
	// @param authenticationToken An authentication token returned by a previous
	//   call to UserStore.authenticate or UserStore.authenticateLongSession that
	//   could not be completed in a single call because a second factor was required.
	//
	// @param oneTimeCode The one time code entered by the user. This value is delivered
	//   out-of-band, typically via SMS or an authenticator application.
	//
	// @param deviceIdentifier See the corresponding parameter in authenticateLongSession.
	//
	// @param deviceDescription See the corresponding parameter in authenticateLongSession.
	//
	// @return
	//   The result of the authentication. The level of detail provided in the returned
	//   AuthenticationResult.User structure depends on the access level granted by the
	//   calling application's API key. If the initial authentication call was made to
	//   authenticateLongSession, the AuthenticationResult will contain a long-lived
	//   authentication token.
	//
	// @throws EDAMUserException <ul>
	//   <li> DATA_REQUIRED "authenticationToken" - authenticationToken is empty
	//   <li> DATA_REQUIRED "oneTimeCode" - oneTimeCode is empty
	//   <li> BAD_DATA_FORMAT "authenticationToken" - authenticationToken is not well formed
	//   <li> INVALID_AUTH "oneTimeCode" - oneTimeCode did not match
	//   <li> AUTH_EXPIRED "authenticationToken" - authenticationToken has expired
	//   <li> PERMISSION_DENIED "authenticationToken" - authenticationToken is not valid
	//   <li> PERMISSION_DENIED "User.active" - user account is closed
	//   <li> PERMISSION_DENIED "User.tooManyFailuresTryAgainLater" - user has
	//     failed authentication too often
	//   <li> DATA_CONFLICT "User.twoFactorAuthentication" - The user has not enabled
	//      two-factor authentication.</li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - OneTimeCode
	//  - DeviceIdentifier
	//  - DeviceDescription
	CompleteTwoFactorAuthentication(ctx context.Context, authenticationToken string, oneTimeCode string, deviceIdentifier string, deviceDescription string) (r *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Revoke an existing long lived authentication token. This can be used to
	// revoke OAuth tokens or tokens created by calling authenticateLongSession,
	// and allows a user to effectively log out of Evernote from the perspective
	// of the application that holds the token. The authentication token that is
	// passed is immediately revoked and may not be used to call any authenticated
	// EDAM function.
	//
	// @param authenticationToken the authentication token to revoke.
	//
	// @throws EDAMUserException <ul>
	//   <li> DATA_REQUIRED "authenticationToken" - no authentication token provided
	//   <li> BAD_DATA_FORMAT "authenticationToken" - the authentication token is not well formed
	//   <li> INVALID_AUTH "authenticationToken" - the authentication token is invalid
	//   <li> AUTH_EXPIRED "authenticationToken" - the authentication token is expired or
	//     is already revoked.
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	RevokeLongSession(ctx context.Context, authenticationToken string) (userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// This is used to take an existing authentication token that grants access
	// to an individual user account (returned from 'authenticate',
	// 'authenticateLongSession' or an OAuth authorization) and obtain an additional
	// authentication token that may be used to access business notebooks if the user
	// is a member of an Evernote Business account.
	//
	// The resulting authentication token may be used to make NoteStore API calls
	// against the business using the NoteStore URL returned in the result.
	//
	// @param authenticationToken
	//   The authentication token for the user. This may not be a shared authentication
	//   token (returned by NoteStore.authenticateToSharedNotebook or
	//   NoteStore.authenticateToSharedNote) or a business authentication token.
	//
	// @return
	//   The result of the authentication, with the token granting access to the
	//   business in the result's 'authenticationToken' field. The URL that must
	//   be used to access the business account NoteStore will be returned in the
	//   result's 'noteStoreUrl' field.  The 'User' field will
	//   not be set in the result.
	//
	// @throws EDAMUserException <ul>
	//   <li> PERMISSION_DENIED "authenticationToken" - the provided authentication token
	//        is a shared or business authentication token. </li>
	//   <li> PERMISSION_DENIED "Business" - the user identified by the provided
	//        authentication token is not currently a member of a business. </li>
	//   <li> PERMISSION_DENIED "Business.status" - the business that the user is a
	//        member of is not currently in an active status. </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	AuthenticateToBusiness(ctx context.Context, authenticationToken string) (r *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// This is used to take an existing authentication token (returned from
	// 'authenticate') and exchange it for a newer token which will not expire
	// as soon.  This must be invoked before the previous token expires.
	//
	// This function is only availabe to Evernote's internal applications.
	//
	// @param authenticationToken
	//   The previous authentication token from the authenticate() result.
	//
	// @return
	//   The result of the authentication, with the new token in
	//   the result's 'authenticationToken' field.  The 'User' field will
	//   not be set in the result.
	//
	// Parameters:
	//  - AuthenticationToken
	RefreshAuthentication(ctx context.Context, authenticationToken string) (r *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Returns the User corresponding to the provided authentication token,
	// or throws an exception if this token is not valid.
	// The level of detail provided in the returned User structure depends on
	// the access level granted by the token, so a web service client may receive
	// fewer fields than an integrated desktop client.
	//
	// Parameters:
	//  - AuthenticationToken
	GetUser(ctx context.Context, authenticationToken string) (r *Types.User, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Asks the UserStore about the publicly available location information for
	// a particular username.
	//
	// @throws EDAMUserException <ul>
	//   <li> DATA_REQUIRED "username" - username is empty
	// </ul>
	//
	// Parameters:
	//  - Username
	GetPublicUserInfo(ctx context.Context, username string) (r *PublicUserInfo, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, userException *Errors.EDAMUserException, err error)
	// Returns information regarding a user's Premium account corresponding to the
	// provided authentication token, or throws an exception if this token is not
	// valid.
	//
	// Parameters:
	//  - AuthenticationToken
	GetPremiumInfo(ctx context.Context, authenticationToken string) (r *Types.PremiumInfo, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Returns the URL that should be used to talk to the NoteStore for the
	// account represented by the provided authenticationToken.
	// This method isn't needed by most clients, who can retrieve the correct
	// NoteStore URL from the AuthenticationResult returned from the authenticate
	// or refreshAuthentication calls. This method is typically only needed
	// to look up the correct URL for a long-lived session token (e.g. for an
	// OAuth web service).
	//
	// Parameters:
	//  - AuthenticationToken
	GetNoteStoreUrl(ctx context.Context, authenticationToken string) (r string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
}

//Service:  UserStore
//<p>
//The UserStore service is primarily used by EDAM clients to establish
//authentication via username and password over a trusted connection (e.g.
//SSL).  A client's first call to this interface should be checkVersion() to
//ensure that the client's software is up to date.
//</p>
//All calls which require an authenticationToken may throw an
//EDAMUserException for the following reasons:
// <ul>
//  <li> AUTH_EXPIRED "authenticationToken" - token has expired
//  <li> BAD_DATA_FORMAT "authenticationToken" - token is malformed
//  <li> DATA_REQUIRED "authenticationToken" - token is empty
//  <li> INVALID_AUTH "authenticationToken" - token signature is invalid
//</ul>
type UserStoreClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewUserStoreClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserStoreClient {
	return &UserStoreClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewUserStoreClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserStoreClient {
	return &UserStoreClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// This should be the first call made by a client to the EDAM service.  It
// tells the service what protocol version is used by the client.  The
// service will then return true if the client is capable of talking to
// the service, and false if the client's protocol version is incompatible
// with the service, so the client must upgrade.  If a client receives a
// false value, it should report the incompatibility to the user and not
// continue with any more EDAM requests (UserStore or NoteStore).
//
// @param clientName
//   This string provides some information about the client for
//   tracking/logging on the service.  It should provide information about
//   the client's software and platform. The structure should be:
//   application/version; platform/version; [ device/version ]
//   E.g. "Evernote Windows/3.0.1; Windows/XP SP3".
//
// @param edamVersionMajor
//   This should be the major protocol version that was compiled by the
//   client.  This should be the current value of the EDAM_VERSION_MAJOR
//   constant for the client.
//
// @param edamVersionMinor
//   This should be the major protocol version that was compiled by the
//   client.  This should be the current value of the EDAM_VERSION_MINOR
//   constant for the client.
//
// Parameters:
//  - ClientName
//  - EdamVersionMajor
//  - EdamVersionMinor
func (p *UserStoreClient) CheckVersion(ctx context.Context, clientName string, edamVersionMajor int16, edamVersionMinor int16) (r bool, err error) {
	if err = p.sendCheckVersion(ctx, clientName, edamVersionMajor, edamVersionMinor); err != nil {
		return
	}
	return p.recvCheckVersion(ctx)
}

func (p *UserStoreClient) sendCheckVersion(ctx context.Context, clientName string, edamVersionMajor int16, edamVersionMinor int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin(ctx, "checkVersion", thrift.CALL, p.SeqId)
	args1 := NewCheckVersionArgs()
	args1.ClientName = clientName
	args1.EdamVersionMajor = edamVersionMajor
	args1.EdamVersionMinor = edamVersionMinor
	err = args1.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return
}

func (p *UserStoreClient) recvCheckVersion(ctx context.Context) (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin(ctx)
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error4 error
		err = error3.Read(ctx, iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(ctx); err != nil {
			return
		}
		err = error4
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result2 := NewCheckVersionResult()
	err = result2.Read(ctx, iprot)
	iprot.ReadMessageEnd(ctx)
	value = result2.Success
	return
}

// This provides bootstrap information to the client. Various bootstrap
// profiles and settings may be used by the client to configure itself.
//
// @param locale
//   The client's current locale, expressed in language[_country]
//   format. E.g., "en_US". See ISO-639 and ISO-3166 for valid
//   language and country codes.
//
// @return
//   The bootstrap information suitable for this client.
//
// Parameters:
//  - Locale
func (p *UserStoreClient) GetBootstrapInfo(ctx context.Context, locale string) (r *BootstrapInfo, err error) {
	if err = p.sendGetBootstrapInfo(ctx, locale); err != nil {
		return
	}
	return p.recvGetBootstrapInfo(ctx)
}

func (p *UserStoreClient) sendGetBootstrapInfo(ctx context.Context, locale string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin(ctx, "getBootstrapInfo", thrift.CALL, p.SeqId)
	args5 := NewGetBootstrapInfoArgs()
	args5.Locale = locale
	err = args5.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return
}

func (p *UserStoreClient) recvGetBootstrapInfo(ctx context.Context) (value *BootstrapInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin(ctx)
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error7 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error8 error
		err = error7.Read(ctx, iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(ctx); err != nil {
			return
		}
		err = error8
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result6 := NewGetBootstrapInfoResult()
	err = result6.Read(ctx, iprot)
	iprot.ReadMessageEnd(ctx)
	value = result6.Success
	return
}

// This is used to check a username and password in order to create a
// short-lived authentication session that can be used for further actions.
//
// This function is only available to Evernote's internal applications.
// Third party applications must authenticate using OAuth as
// described at
// <a href="http://dev.evernote.com/documentation/cloud/">dev.evernote.com</a>.
//
// @param username
//   The username (not numeric user ID) for the account to
//   authenticate against.  This function will also accept the user's
//   registered email address in this parameter.
//
// @param password
//   The plaintext password to check against the account.  Since
//   this is not protected by the EDAM protocol, this information must be
//   provided over a protected transport (e.g. SSL).
//
// @param consumerKey
//   The "consumer key" portion of the API key issued to the client application
//   by Evernote.
//
// @param consumerSecret
//   The "consumer secret" portion of the API key issued to the client application
//   by Evernote.
//
// @param supportsTwoFactor
//   Whether the calling application supports two-factor authentication. If this
//   parameter is false, this method will fail with the error code INVALID_AUTH and the
//   parameter "password" when called for a user who has enabled two-factor
//   authentication.
//
// @return
//   <p>The result of the authentication.  If the authentication was successful,
//   the AuthenticationResult.user field will be set with the full information
//   about the User.</p>
//   <p>If the user has two-factor authentication enabled,
//   AuthenticationResult.secondFactorRequired will be set and
//   AuthenticationResult.authenticationToken will contain a short-lived token
//   that may only be used to complete the two-factor authentication process by calling
//   UserStore.completeTwoFactorAuthentication.</p>
//
// @throws EDAMUserException <ul>
//   <li> DATA_REQUIRED "username" - username is empty
//   <li> DATA_REQUIRED "password" - password is empty
//   <li> DATA_REQUIRED "consumerKey" - consumerKey is empty
//   <li> INVALID_AUTH "username" - username not found
//   <li> INVALID_AUTH "password" - password did not match
//   <li> INVALID_AUTH "consumerKey" - consumerKey is not authorized
//   <li> INVALID_AUTH "consumerSecret" - consumerSecret is incorrect
//   <li> PERMISSION_DENIED "User.active" - user account is closed
//   <li> PERMISSION_DENIED "User.tooManyFailuresTryAgainLater" - user has
//     failed authentication too often
// </ul>
//
// Parameters:
//  - Username
//  - Password
//  - ConsumerKey
//  - ConsumerSecret
//  - SupportsTwoFactor
func (p *UserStoreClient) Authenticate(ctx context.Context, username string, password string, consumerKey string, consumerSecret string, supportsTwoFactor bool) (r *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendAuthenticate(ctx, username, password, consumerKey, consumerSecret, supportsTwoFactor); err != nil {
		return
	}
	return p.recvAuthenticate(ctx)
}

func (p *UserStoreClient) sendAuthenticate(ctx context.Context, username string, password string, consumerKey string, consumerSecret string, supportsTwoFactor bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin(ctx, "authenticate", thrift.CALL, p.SeqId)
	args9 := NewAuthenticateArgs()
	args9.Username = username
	args9.Password = password
	args9.ConsumerKey = consumerKey
	args9.ConsumerSecret = consumerSecret
	args9.SupportsTwoFactor = supportsTwoFactor
	err = args9.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return
}

func (p *UserStoreClient) recvAuthenticate(ctx context.Context) (value *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin(ctx)
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error11 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error12 error
		err = error11.Read(ctx, iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(ctx); err != nil {
			return
		}
		err = error12
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result10 := NewAuthenticateResult()
	err = result10.Read(ctx, iprot)
	iprot.ReadMessageEnd(ctx)
	value = result10.Success
	if result10.UserException != nil {
		userException = result10.UserException
	}
	if result10.SystemException != nil {
		systemException = result10.SystemException
	}
	return
}

// This is used to check a username and password in order to create a
// long-lived authentication token that can be used for further actions.
//
// This function is not available to most third party applications,
// which typically authenticate using OAuth as
// described at
// <a href="http://dev.evernote.com/documentation/cloud/">dev.evernote.com</a>.
// If you believe that your application requires permission to authenticate
// using username and password instead of OAuth, please contact Evernote
// developer support by visiting
// <a href="http://dev.evernote.com">dev.evernote.com</a>.
//
// @param username
//   The username or registered email address of the account to
//   authenticate against.
//
// @param password
//   The plaintext password to check against the account.  Since
//   this is not protected by the EDAM protocol, this information must be
//   provided over a protected transport (i.e. SSL).
//
// @param consumerKey
//   The "consumer key" portion of the API key issued to the client application
//   by Evernote.
//
// @param consumerSecret
//   The "consumer secret" portion of the API key issued to the client application
//   by Evernote.
//
// @param deviceIdentifier
//   An optional string, no more than 32 characters in length, that uniquely identifies
//   the device from which the authentication is being performed. This string allows
//   the service to return the same authentication token when a given application
//   requests authentication repeatedly from the same device. This may happen when the
//   user logs out of an application and then logs back in, or when the application is
//   uninstalled and later reinstalled. If no reliable device identifier can be created,
//   this value should be omitted. If set, the device identifier must be between
//   1 and EDAM_DEVICE_ID_LEN_MAX characters long and must match the regular expression
//   EDAM_DEVICE_ID_REGEX.
//
// @param deviceDescription
//   A description of the device from which the authentication is being performed.
//   This field is displayed to the user in a list of authorized applications to
//   allow them to distinguish between multiple tokens issued to the same client
//   application on different devices. For example, the Evernote iOS client on
//   a user's iPhone and iPad might pass the iOS device names "Bob's iPhone" and
//   "Bob's iPad". The device description must be between 1 and
//   EDAM_DEVICE_DESCRIPTION_LEN_MAX characters long and must match the regular
//   expression EDAM_DEVICE_DESCRIPTION_REGEX.
//
// @param supportsTwoFactor
//   Whether the calling application supports two-factor authentication. If this
//   parameter is false, this method will fail with the error code INVALID_AUTH and the
//   parameter "password" when called for a user who has enabled two-factor
//   authentication.
//
// @return
//   <p>The result of the authentication. The level of detail provided in the returned
//   AuthenticationResult.User structure depends on the access level granted by
//   calling application's API key.</p>
//   <p>If the user has two-factor authentication enabled,
//   AuthenticationResult.secondFactorRequired will be set and
//   AuthenticationResult.authenticationToken will contain a short-lived token
//   that may only be used to complete the two-factor authentication process by calling
//   UserStore.completeTwoFactorAuthentication.</p>
//
// @throws EDAMUserException <ul>
//   <li> DATA_REQUIRED "username" - username is empty
//   <li> DATA_REQUIRED "password" - password is empty
//   <li> DATA_REQUIRED "consumerKey" - consumerKey is empty
//   <li> DATA_REQUIRED "consumerSecret" - consumerSecret is empty
//   <li> DATA_REQUIRED "deviceDescription" - deviceDescription is empty
//   <li> BAD_DATA_FORMAT "deviceDescription" - deviceDescription is not valid.
//   <li> BAD_DATA_FORMAT "deviceIdentifier" - deviceIdentifier is not valid.
//   <li> INVALID_AUTH "username" - username not found
//   <li> INVALID_AUTH "password" - password did not match
//   <li> INVALID_AUTH "consumerKey" - consumerKey is not authorized
//   <li> INVALID_AUTH "consumerSecret" - consumerSecret is incorrect
//   <li> PERMISSION_DENIED "User.active" - user account is closed
//   <li> PERMISSION_DENIED "User.tooManyFailuresTryAgainLater" - user has
//     failed authentication too often
// </ul>
//
// Parameters:
//  - Username
//  - Password
//  - ConsumerKey
//  - ConsumerSecret
//  - DeviceIdentifier
//  - DeviceDescription
//  - SupportsTwoFactor
func (p *UserStoreClient) AuthenticateLongSession(ctx context.Context, username string, password string, consumerKey string, consumerSecret string, deviceIdentifier string, deviceDescription string, supportsTwoFactor bool) (r *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendAuthenticateLongSession(ctx, username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor); err != nil {
		return
	}
	return p.recvAuthenticateLongSession(ctx)
}

func (p *UserStoreClient) sendAuthenticateLongSession(ctx context.Context, username string, password string, consumerKey string, consumerSecret string, deviceIdentifier string, deviceDescription string, supportsTwoFactor bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin(ctx, "authenticateLongSession", thrift.CALL, p.SeqId)
	args13 := NewAuthenticateLongSessionArgs()
	args13.Username = username
	args13.Password = password
	args13.ConsumerKey = consumerKey
	args13.ConsumerSecret = consumerSecret
	args13.DeviceIdentifier = deviceIdentifier
	args13.DeviceDescription = deviceDescription
	args13.SupportsTwoFactor = supportsTwoFactor
	err = args13.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return
}

func (p *UserStoreClient) recvAuthenticateLongSession(ctx context.Context) (value *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin(ctx)
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error15 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error16 error
		err = error15.Read(ctx, iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(ctx); err != nil {
			return
		}
		err = error16
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result14 := NewAuthenticateLongSessionResult()
	err = result14.Read(ctx, iprot)
	iprot.ReadMessageEnd(ctx)
	value = result14.Success
	if result14.UserException != nil {
		userException = result14.UserException
	}
	if result14.SystemException != nil {
		systemException = result14.SystemException
	}
	return
}

// Complete the authentication process when a second factor is required. This
// call is made after a successful call to authenticate or authenticateLongSession
// when the authenticating user has enabled two-factor authentication.
//
// @param authenticationToken An authentication token returned by a previous
//   call to UserStore.authenticate or UserStore.authenticateLongSession that
//   could not be completed in a single call because a second factor was required.
//
// @param oneTimeCode The one time code entered by the user. This value is delivered
//   out-of-band, typically via SMS or an authenticator application.
//
// @param deviceIdentifier See the corresponding parameter in authenticateLongSession.
//
// @param deviceDescription See the corresponding parameter in authenticateLongSession.
//
// @return
//   The result of the authentication. The level of detail provided in the returned
//   AuthenticationResult.User structure depends on the access level granted by the
//   calling application's API key. If the initial authentication call was made to
//   authenticateLongSession, the AuthenticationResult will contain a long-lived
//   authentication token.
//
// @throws EDAMUserException <ul>
//   <li> DATA_REQUIRED "authenticationToken" - authenticationToken is empty
//   <li> DATA_REQUIRED "oneTimeCode" - oneTimeCode is empty
//   <li> BAD_DATA_FORMAT "authenticationToken" - authenticationToken is not well formed
//   <li> INVALID_AUTH "oneTimeCode" - oneTimeCode did not match
//   <li> AUTH_EXPIRED "authenticationToken" - authenticationToken has expired
//   <li> PERMISSION_DENIED "authenticationToken" - authenticationToken is not valid
//   <li> PERMISSION_DENIED "User.active" - user account is closed
//   <li> PERMISSION_DENIED "User.tooManyFailuresTryAgainLater" - user has
//     failed authentication too often
//   <li> DATA_CONFLICT "User.twoFactorAuthentication" - The user has not enabled
//      two-factor authentication.</li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - OneTimeCode
//  - DeviceIdentifier
//  - DeviceDescription
func (p *UserStoreClient) CompleteTwoFactorAuthentication(ctx context.Context, authenticationToken string, oneTimeCode string, deviceIdentifier string, deviceDescription string) (r *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendCompleteTwoFactorAuthentication(ctx, authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription); err != nil {
		return
	}
	return p.recvCompleteTwoFactorAuthentication(ctx)
}

func (p *UserStoreClient) sendCompleteTwoFactorAuthentication(ctx context.Context, authenticationToken string, oneTimeCode string, deviceIdentifier string, deviceDescription string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin(ctx, "completeTwoFactorAuthentication", thrift.CALL, p.SeqId)
	args17 := NewCompleteTwoFactorAuthenticationArgs()
	args17.AuthenticationToken = authenticationToken
	args17.OneTimeCode = oneTimeCode
	args17.DeviceIdentifier = deviceIdentifier
	args17.DeviceDescription = deviceDescription
	err = args17.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return
}

func (p *UserStoreClient) recvCompleteTwoFactorAuthentication(ctx context.Context) (value *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin(ctx)
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error19 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error20 error
		err = error19.Read(ctx, iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(ctx); err != nil {
			return
		}
		err = error20
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result18 := NewCompleteTwoFactorAuthenticationResult()
	err = result18.Read(ctx, iprot)
	iprot.ReadMessageEnd(ctx)
	value = result18.Success
	if result18.UserException != nil {
		userException = result18.UserException
	}
	if result18.SystemException != nil {
		systemException = result18.SystemException
	}
	return
}

// Revoke an existing long lived authentication token. This can be used to
// revoke OAuth tokens or tokens created by calling authenticateLongSession,
// and allows a user to effectively log out of Evernote from the perspective
// of the application that holds the token. The authentication token that is
// passed is immediately revoked and may not be used to call any authenticated
// EDAM function.
//
// @param authenticationToken the authentication token to revoke.
//
// @throws EDAMUserException <ul>
//   <li> DATA_REQUIRED "authenticationToken" - no authentication token provided
//   <li> BAD_DATA_FORMAT "authenticationToken" - the authentication token is not well formed
//   <li> INVALID_AUTH "authenticationToken" - the authentication token is invalid
//   <li> AUTH_EXPIRED "authenticationToken" - the authentication token is expired or
//     is already revoked.
// </ul>
//
// Parameters:
//  - AuthenticationToken
func (p *UserStoreClient) RevokeLongSession(ctx context.Context, authenticationToken string) (userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendRevokeLongSession(ctx, authenticationToken); err != nil {
		return
	}
	return p.recvRevokeLongSession(ctx)
}

func (p *UserStoreClient) sendRevokeLongSession(ctx context.Context, authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin(ctx, "revokeLongSession", thrift.CALL, p.SeqId)
	args21 := NewRevokeLongSessionArgs()
	args21.AuthenticationToken = authenticationToken
	err = args21.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return
}

func (p *UserStoreClient) recvRevokeLongSession(ctx context.Context) (userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin(ctx)
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error23 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error24 error
		err = error23.Read(ctx, iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(ctx); err != nil {
			return
		}
		err = error24
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result22 := NewRevokeLongSessionResult()
	err = result22.Read(ctx, iprot)
	iprot.ReadMessageEnd(ctx)
	if result22.UserException != nil {
		userException = result22.UserException
	}
	if result22.SystemException != nil {
		systemException = result22.SystemException
	}
	return
}

// This is used to take an existing authentication token that grants access
// to an individual user account (returned from 'authenticate',
// 'authenticateLongSession' or an OAuth authorization) and obtain an additional
// authentication token that may be used to access business notebooks if the user
// is a member of an Evernote Business account.
//
// The resulting authentication token may be used to make NoteStore API calls
// against the business using the NoteStore URL returned in the result.
//
// @param authenticationToken
//   The authentication token for the user. This may not be a shared authentication
//   token (returned by NoteStore.authenticateToSharedNotebook or
//   NoteStore.authenticateToSharedNote) or a business authentication token.
//
// @return
//   The result of the authentication, with the token granting access to the
//   business in the result's 'authenticationToken' field. The URL that must
//   be used to access the business account NoteStore will be returned in the
//   result's 'noteStoreUrl' field.  The 'User' field will
//   not be set in the result.
//
// @throws EDAMUserException <ul>
//   <li> PERMISSION_DENIED "authenticationToken" - the provided authentication token
//        is a shared or business authentication token. </li>
//   <li> PERMISSION_DENIED "Business" - the user identified by the provided
//        authentication token is not currently a member of a business. </li>
//   <li> PERMISSION_DENIED "Business.status" - the business that the user is a
//        member of is not currently in an active status. </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
func (p *UserStoreClient) AuthenticateToBusiness(ctx context.Context, authenticationToken string) (r *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendAuthenticateToBusiness(ctx, authenticationToken); err != nil {
		return
	}
	return p.recvAuthenticateToBusiness(ctx)
}

func (p *UserStoreClient) sendAuthenticateToBusiness(ctx context.Context, authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin(ctx, "authenticateToBusiness", thrift.CALL, p.SeqId)
	args25 := NewAuthenticateToBusinessArgs()
	args25.AuthenticationToken = authenticationToken
	err = args25.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return
}

func (p *UserStoreClient) recvAuthenticateToBusiness(ctx context.Context) (value *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin(ctx)
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error27 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error28 error
		err = error27.Read(ctx, iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(ctx); err != nil {
			return
		}
		err = error28
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result26 := NewAuthenticateToBusinessResult()
	err = result26.Read(ctx, iprot)
	iprot.ReadMessageEnd(ctx)
	value = result26.Success
	if result26.UserException != nil {
		userException = result26.UserException
	}
	if result26.SystemException != nil {
		systemException = result26.SystemException
	}
	return
}

// This is used to take an existing authentication token (returned from
// 'authenticate') and exchange it for a newer token which will not expire
// as soon.  This must be invoked before the previous token expires.
//
// This function is only availabe to Evernote's internal applications.
//
// @param authenticationToken
//   The previous authentication token from the authenticate() result.
//
// @return
//   The result of the authentication, with the new token in
//   the result's 'authenticationToken' field.  The 'User' field will
//   not be set in the result.
//
// Parameters:
//  - AuthenticationToken
func (p *UserStoreClient) RefreshAuthentication(ctx context.Context, authenticationToken string) (r *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendRefreshAuthentication(ctx, authenticationToken); err != nil {
		return
	}
	return p.recvRefreshAuthentication(ctx)
}

func (p *UserStoreClient) sendRefreshAuthentication(ctx context.Context, authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin(ctx, "refreshAuthentication", thrift.CALL, p.SeqId)
	args29 := NewRefreshAuthenticationArgs()
	args29.AuthenticationToken = authenticationToken
	err = args29.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return
}

func (p *UserStoreClient) recvRefreshAuthentication(ctx context.Context) (value *AuthenticationResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin(ctx)
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error32 error
		err = error31.Read(ctx, iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(ctx); err != nil {
			return
		}
		err = error32
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result30 := NewRefreshAuthenticationResult()
	err = result30.Read(ctx, iprot)
	iprot.ReadMessageEnd(ctx)
	value = result30.Success
	if result30.UserException != nil {
		userException = result30.UserException
	}
	if result30.SystemException != nil {
		systemException = result30.SystemException
	}
	return
}

// Returns the User corresponding to the provided authentication token,
// or throws an exception if this token is not valid.
// The level of detail provided in the returned User structure depends on
// the access level granted by the token, so a web service client may receive
// fewer fields than an integrated desktop client.
//
// Parameters:
//  - AuthenticationToken
func (p *UserStoreClient) GetUser(ctx context.Context, authenticationToken string) (r *Types.User, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendGetUser(ctx, authenticationToken); err != nil {
		return
	}
	return p.recvGetUser(ctx)
}

func (p *UserStoreClient) sendGetUser(ctx context.Context, authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin(ctx, "getUser", thrift.CALL, p.SeqId)
	args33 := NewGetUserArgs()
	args33.AuthenticationToken = authenticationToken
	err = args33.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return
}

func (p *UserStoreClient) recvGetUser(ctx context.Context) (value *Types.User, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin(ctx)
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error36 error
		err = error35.Read(ctx, iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(ctx); err != nil {
			return
		}
		err = error36
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result34 := NewGetUserResult()
	err = result34.Read(ctx, iprot)
	iprot.ReadMessageEnd(ctx)
	value = result34.Success
	if result34.UserException != nil {
		userException = result34.UserException
	}
	if result34.SystemException != nil {
		systemException = result34.SystemException
	}
	return
}

// Asks the UserStore about the publicly available location information for
// a particular username.
//
// @throws EDAMUserException <ul>
//   <li> DATA_REQUIRED "username" - username is empty
// </ul>
//
// Parameters:
//  - Username
func (p *UserStoreClient) GetPublicUserInfo(ctx context.Context, username string) (r *PublicUserInfo, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, userException *Errors.EDAMUserException, err error) {
	if err = p.sendGetPublicUserInfo(ctx, username); err != nil {
		return
	}
	return p.recvGetPublicUserInfo(ctx)
}

func (p *UserStoreClient) sendGetPublicUserInfo(ctx context.Context, username string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin(ctx, "getPublicUserInfo", thrift.CALL, p.SeqId)
	args37 := NewGetPublicUserInfoArgs()
	args37.Username = username
	err = args37.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return
}

func (p *UserStoreClient) recvGetPublicUserInfo(ctx context.Context) (value *PublicUserInfo, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, userException *Errors.EDAMUserException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin(ctx)
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error40 error
		err = error39.Read(ctx, iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(ctx); err != nil {
			return
		}
		err = error40
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result38 := NewGetPublicUserInfoResult()
	err = result38.Read(ctx, iprot)
	iprot.ReadMessageEnd(ctx)
	value = result38.Success
	if result38.NotFoundException != nil {
		notFoundException = result38.NotFoundException
	}
	if result38.SystemException != nil {
		systemException = result38.SystemException
	}
	if result38.UserException != nil {
		userException = result38.UserException
	}
	return
}

// Returns information regarding a user's Premium account corresponding to the
// provided authentication token, or throws an exception if this token is not
// valid.
//
// Parameters:
//  - AuthenticationToken
func (p *UserStoreClient) GetPremiumInfo(ctx context.Context, authenticationToken string) (r *Types.PremiumInfo, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendGetPremiumInfo(ctx, authenticationToken); err != nil {
		return
	}
	return p.recvGetPremiumInfo(ctx)
}

func (p *UserStoreClient) sendGetPremiumInfo(ctx context.Context, authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin(ctx, "getPremiumInfo", thrift.CALL, p.SeqId)
	args41 := NewGetPremiumInfoArgs()
	args41.AuthenticationToken = authenticationToken
	err = args41.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return
}

func (p *UserStoreClient) recvGetPremiumInfo(ctx context.Context) (value *Types.PremiumInfo, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin(ctx)
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error43 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error44 error
		err = error43.Read(ctx, iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(ctx); err != nil {
			return
		}
		err = error44
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result42 := NewGetPremiumInfoResult()
	err = result42.Read(ctx, iprot)
	iprot.ReadMessageEnd(ctx)
	value = result42.Success
	if result42.UserException != nil {
		userException = result42.UserException
	}
	if result42.SystemException != nil {
		systemException = result42.SystemException
	}
	return
}

// Returns the URL that should be used to talk to the NoteStore for the
// account represented by the provided authenticationToken.
// This method isn't needed by most clients, who can retrieve the correct
// NoteStore URL from the AuthenticationResult returned from the authenticate
// or refreshAuthentication calls. This method is typically only needed
// to look up the correct URL for a long-lived session token (e.g. for an
// OAuth web service).
//
// Parameters:
//  - AuthenticationToken
func (p *UserStoreClient) GetNoteStoreUrl(ctx context.Context, authenticationToken string) (r string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendGetNoteStoreUrl(ctx, authenticationToken); err != nil {
		return
	}
	return p.recvGetNoteStoreUrl(ctx)
}

func (p *UserStoreClient) sendGetNoteStoreUrl(ctx context.Context, authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin(ctx, "getNoteStoreUrl", thrift.CALL, p.SeqId)
	args45 := NewGetNoteStoreUrlArgs()
	args45.AuthenticationToken = authenticationToken
	err = args45.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return
}

func (p *UserStoreClient) recvGetNoteStoreUrl(ctx context.Context) (value string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin(ctx)
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error48 error
		err = error47.Read(ctx, iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(ctx); err != nil {
			return
		}
		err = error48
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result46 := NewGetNoteStoreUrlResult()
	err = result46.Read(ctx, iprot)
	iprot.ReadMessageEnd(ctx)
	value = result46.Success
	if result46.UserException != nil {
		userException = result46.UserException
	}
	if result46.SystemException != nil {
		systemException = result46.SystemException
	}
	return
}

type UserStoreProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      UserStore
}

func (p *UserStoreProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *UserStoreProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *UserStoreProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewUserStoreProcessor(handler UserStore) *UserStoreProcessor {

	self49 := &UserStoreProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self49.processorMap["checkVersion"] = &userStoreProcessorCheckVersion{handler: handler}
	self49.processorMap["getBootstrapInfo"] = &userStoreProcessorGetBootstrapInfo{handler: handler}
	self49.processorMap["authenticate"] = &userStoreProcessorAuthenticate{handler: handler}
	self49.processorMap["authenticateLongSession"] = &userStoreProcessorAuthenticateLongSession{handler: handler}
	self49.processorMap["completeTwoFactorAuthentication"] = &userStoreProcessorCompleteTwoFactorAuthentication{handler: handler}
	self49.processorMap["revokeLongSession"] = &userStoreProcessorRevokeLongSession{handler: handler}
	self49.processorMap["authenticateToBusiness"] = &userStoreProcessorAuthenticateToBusiness{handler: handler}
	self49.processorMap["refreshAuthentication"] = &userStoreProcessorRefreshAuthentication{handler: handler}
	self49.processorMap["getUser"] = &userStoreProcessorGetUser{handler: handler}
	self49.processorMap["getPublicUserInfo"] = &userStoreProcessorGetPublicUserInfo{handler: handler}
	self49.processorMap["getPremiumInfo"] = &userStoreProcessorGetPremiumInfo{handler: handler}
	self49.processorMap["getNoteStoreUrl"] = &userStoreProcessorGetNoteStoreUrl{handler: handler}
	return self49
}

func (p *UserStoreProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, exp thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin(ctx)
	if err != nil {
		x330 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		return false, x330
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x50 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x50.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x50

}

type userStoreProcessorCheckVersion struct {
	handler UserStore
}

func (p *userStoreProcessorCheckVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, exp thrift.TException) {
	args := NewCheckVersionArgs()
	if err := args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ctx, "checkVersion", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	iprot.ReadMessageEnd(ctx)
	result := NewCheckVersionResult()
	var err error
	if result.Success, err = p.handler.CheckVersion(args.ClientName, args.EdamVersionMajor, args.EdamVersionMinor); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkVersion: "+err.Error())
		oprot.WriteMessageBegin(ctx, "checkVersion", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	if err2 := oprot.WriteMessageBegin(ctx, "checkVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(ctx, oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, nil
}

type userStoreProcessorGetBootstrapInfo struct {
	handler UserStore
}

func (p *userStoreProcessorGetBootstrapInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, exp thrift.TException) {
	args := NewGetBootstrapInfoArgs()
	if err := args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ctx, "getBootstrapInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	iprot.ReadMessageEnd(ctx)
	result := NewGetBootstrapInfoResult()
	var err error
	if result.Success, err = p.handler.GetBootstrapInfo(args.Locale); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBootstrapInfo: "+err.Error())
		oprot.WriteMessageBegin(ctx, "getBootstrapInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	if err2 := oprot.WriteMessageBegin(ctx, "getBootstrapInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(ctx, oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, nil
}

type userStoreProcessorAuthenticate struct {
	handler UserStore
}

func (p *userStoreProcessorAuthenticate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, exp thrift.TException) {
	args := NewAuthenticateArgs()
	if err := args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ctx, "authenticate", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	iprot.ReadMessageEnd(ctx)
	result := NewAuthenticateResult()
	var err error
	if result.Success, result.UserException, result.SystemException, err = p.handler.Authenticate(ctx, args.Username, args.Password, args.ConsumerKey, args.ConsumerSecret, args.SupportsTwoFactor); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authenticate: "+err.Error())
		oprot.WriteMessageBegin(ctx, "authenticate", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	if err2 := oprot.WriteMessageBegin(ctx, "authenticate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(ctx, oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, nil
}

type userStoreProcessorAuthenticateLongSession struct {
	handler UserStore
}

func (p *userStoreProcessorAuthenticateLongSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, exp thrift.TException) {
	args := NewAuthenticateLongSessionArgs()
	if err := args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ctx, "authenticateLongSession", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	iprot.ReadMessageEnd(ctx)
	result := NewAuthenticateLongSessionResult()
	var err error
	if result.Success, result.UserException, result.SystemException, err = p.handler.AuthenticateLongSession(ctx, args.Username, args.Password, args.ConsumerKey, args.ConsumerSecret, args.DeviceIdentifier, args.DeviceDescription, args.SupportsTwoFactor); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authenticateLongSession: "+err.Error())
		oprot.WriteMessageBegin(ctx, "authenticateLongSession", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	if err2 := oprot.WriteMessageBegin(ctx, "authenticateLongSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(ctx, oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, nil
}

type userStoreProcessorCompleteTwoFactorAuthentication struct {
	handler UserStore
}

func (p *userStoreProcessorCompleteTwoFactorAuthentication) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, exp thrift.TException) {
	args := NewCompleteTwoFactorAuthenticationArgs()
	if err := args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ctx, "completeTwoFactorAuthentication", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	iprot.ReadMessageEnd(ctx)
	result := NewCompleteTwoFactorAuthenticationResult()
	var err error
	if result.Success, result.UserException, result.SystemException, err = p.handler.CompleteTwoFactorAuthentication(ctx, args.AuthenticationToken, args.OneTimeCode, args.DeviceIdentifier, args.DeviceDescription); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing completeTwoFactorAuthentication: "+err.Error())
		oprot.WriteMessageBegin(ctx, "completeTwoFactorAuthentication", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	if err2 := oprot.WriteMessageBegin(ctx, "completeTwoFactorAuthentication", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(ctx, oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, nil
}

type userStoreProcessorRevokeLongSession struct {
	handler UserStore
}

func (p *userStoreProcessorRevokeLongSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, exp thrift.TException) {
	args := NewRevokeLongSessionArgs()
	if err := args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ctx, "revokeLongSession", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	iprot.ReadMessageEnd(ctx)
	result := NewRevokeLongSessionResult()
	var err error
	if result.UserException, result.SystemException, err = p.handler.RevokeLongSession(ctx, args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokeLongSession: "+err.Error())
		oprot.WriteMessageBegin(ctx, "revokeLongSession", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	if err2 := oprot.WriteMessageBegin(ctx, "revokeLongSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(ctx, oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, nil
}

type userStoreProcessorAuthenticateToBusiness struct {
	handler UserStore
}

func (p *userStoreProcessorAuthenticateToBusiness) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, exp thrift.TException) {
	args := NewAuthenticateToBusinessArgs()
	if err := args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ctx, "authenticateToBusiness", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	iprot.ReadMessageEnd(ctx)
	result := NewAuthenticateToBusinessResult()
	var err error
	if result.Success, result.UserException, result.SystemException, err = p.handler.AuthenticateToBusiness(ctx, args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authenticateToBusiness: "+err.Error())
		oprot.WriteMessageBegin(ctx, "authenticateToBusiness", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	if err2 := oprot.WriteMessageBegin(ctx, "authenticateToBusiness", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(ctx, oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, nil
}

type userStoreProcessorRefreshAuthentication struct {
	handler UserStore
}

func (p *userStoreProcessorRefreshAuthentication) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, exp thrift.TException) {
	args := NewRefreshAuthenticationArgs()
	if err := args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ctx, "refreshAuthentication", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	iprot.ReadMessageEnd(ctx)
	result := NewRefreshAuthenticationResult()
	var err error
	if result.Success, result.UserException, result.SystemException, err = p.handler.RefreshAuthentication(ctx, args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing refreshAuthentication: "+err.Error())
		oprot.WriteMessageBegin(ctx, "refreshAuthentication", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	if err2 := oprot.WriteMessageBegin(ctx, "refreshAuthentication", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(ctx, oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, nil
}

type userStoreProcessorGetUser struct {
	handler UserStore
}

func (p *userStoreProcessorGetUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, exp thrift.TException) {
	args := NewGetUserArgs()
	if err := args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ctx, "getUser", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	iprot.ReadMessageEnd(ctx)
	result := NewGetUserResult()
	var err error
	if result.Success, result.UserException, result.SystemException, err = p.handler.GetUser(ctx, args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUser: "+err.Error())
		oprot.WriteMessageBegin(ctx, "getUser", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	if err2 := oprot.WriteMessageBegin(ctx, "getUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(ctx, oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, nil
}

type userStoreProcessorGetPublicUserInfo struct {
	handler UserStore
}

func (p *userStoreProcessorGetPublicUserInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, exp thrift.TException) {
	args := NewGetPublicUserInfoArgs()
	if err := args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ctx, "getPublicUserInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	iprot.ReadMessageEnd(ctx)
	result := NewGetPublicUserInfoResult()
	var err error
	if result.Success, result.NotFoundException, result.SystemException, result.UserException, err = p.handler.GetPublicUserInfo(ctx, args.Username); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPublicUserInfo: "+err.Error())
		oprot.WriteMessageBegin(ctx, "getPublicUserInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	if err2 := oprot.WriteMessageBegin(ctx, "getPublicUserInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(ctx, oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, nil
}

type userStoreProcessorGetPremiumInfo struct {
	handler UserStore
}

func (p *userStoreProcessorGetPremiumInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, exp thrift.TException) {
	args := NewGetPremiumInfoArgs()
	if err := args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ctx, "getPremiumInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	iprot.ReadMessageEnd(ctx)
	result := NewGetPremiumInfoResult()
	var err error
	if result.Success, result.UserException, result.SystemException, err = p.handler.GetPremiumInfo(ctx, args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPremiumInfo: "+err.Error())
		oprot.WriteMessageBegin(ctx, "getPremiumInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	if err2 := oprot.WriteMessageBegin(ctx, "getPremiumInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(ctx, oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, nil
}

type userStoreProcessorGetNoteStoreUrl struct {
	handler UserStore
}

func (p *userStoreProcessorGetNoteStoreUrl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, exp thrift.TException) {
	args := NewGetNoteStoreUrlArgs()
	if err := args.Read(ctx, iprot); err != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ctx, "getNoteStoreUrl", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	iprot.ReadMessageEnd(ctx)
	result := NewGetNoteStoreUrlResult()
	var err error
	if result.Success, result.UserException, result.SystemException, err = p.handler.GetNoteStoreUrl(ctx, args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNoteStoreUrl: "+err.Error())
		oprot.WriteMessageBegin(ctx, "getNoteStoreUrl", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return
	}
	if err2 := oprot.WriteMessageBegin(ctx, "getNoteStoreUrl", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(ctx, oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, nil
}

// HELPER FUNCTIONS AND STRUCTURES

type CheckVersionArgs struct {
	ClientName       string `thrift:"clientName,1"`
	EdamVersionMajor int16  `thrift:"edamVersionMajor,2"`
	EdamVersionMinor int16  `thrift:"edamVersionMinor,3"`
}

func NewCheckVersionArgs() *CheckVersionArgs {
	return &CheckVersionArgs{
		EdamVersionMajor: 1,

		EdamVersionMinor: 25,
	}
}

func (p *CheckVersionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckVersionArgs) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ClientName = v
	}
	return nil
}

func (p *CheckVersionArgs) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.EdamVersionMajor = v
	}
	return nil
}

func (p *CheckVersionArgs) readField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.EdamVersionMinor = v
	}
	return nil
}

func (p *CheckVersionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "checkVersion_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField2(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField3(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckVersionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "clientName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:clientName: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.ClientName)); err != nil {
		return fmt.Errorf("%T.clientName (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:clientName: %s", p, err)
	}
	return err
}

func (p *CheckVersionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "edamVersionMajor", thrift.I16, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:edamVersionMajor: %s", p, err)
	}
	if err := oprot.WriteI16(ctx, int16(p.EdamVersionMajor)); err != nil {
		return fmt.Errorf("%T.edamVersionMajor (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 2:edamVersionMajor: %s", p, err)
	}
	return err
}

func (p *CheckVersionArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "edamVersionMinor", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:edamVersionMinor: %s", p, err)
	}
	if err := oprot.WriteI16(ctx, int16(p.EdamVersionMinor)); err != nil {
		return fmt.Errorf("%T.edamVersionMinor (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 3:edamVersionMinor: %s", p, err)
	}
	return err
}

func (p *CheckVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckVersionArgs(%+v)", *p)
}

type CheckVersionResult struct {
	Success bool `thrift:"success,0"`
}

func NewCheckVersionResult() *CheckVersionResult {
	return &CheckVersionResult{}
}

func (p *CheckVersionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckVersionResult) readField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *CheckVersionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "checkVersion_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckVersionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *CheckVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckVersionResult(%+v)", *p)
}

type GetBootstrapInfoArgs struct {
	Locale string `thrift:"locale,1"`
}

func NewGetBootstrapInfoArgs() *GetBootstrapInfoArgs {
	return &GetBootstrapInfoArgs{}
}

func (p *GetBootstrapInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBootstrapInfoArgs) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Locale = v
	}
	return nil
}

func (p *GetBootstrapInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getBootstrapInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBootstrapInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:locale: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
		return fmt.Errorf("%T.locale (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:locale: %s", p, err)
	}
	return err
}

func (p *GetBootstrapInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBootstrapInfoArgs(%+v)", *p)
}

type GetBootstrapInfoResult struct {
	Success *BootstrapInfo `thrift:"success,0"`
}

func NewGetBootstrapInfoResult() *GetBootstrapInfoResult {
	return &GetBootstrapInfoResult{}
}

func (p *GetBootstrapInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBootstrapInfoResult) readField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = NewBootstrapInfo()
	if err := p.Success.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetBootstrapInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getBootstrapInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBootstrapInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetBootstrapInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBootstrapInfoResult(%+v)", *p)
}

type AuthenticateArgs struct {
	Username          string `thrift:"username,1"`
	Password          string `thrift:"password,2"`
	ConsumerKey       string `thrift:"consumerKey,3"`
	ConsumerSecret    string `thrift:"consumerSecret,4"`
	SupportsTwoFactor bool   `thrift:"supportsTwoFactor,5"`
}

func NewAuthenticateArgs() *AuthenticateArgs {
	return &AuthenticateArgs{}
}

func (p *AuthenticateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(ctx, iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(ctx, iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthenticateArgs) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *AuthenticateArgs) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Password = v
	}
	return nil
}

func (p *AuthenticateArgs) readField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ConsumerKey = v
	}
	return nil
}

func (p *AuthenticateArgs) readField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.ConsumerSecret = v
	}
	return nil
}

func (p *AuthenticateArgs) readField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.SupportsTwoFactor = v
	}
	return nil
}

func (p *AuthenticateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "authenticate_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField2(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField3(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField4(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField5(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthenticateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:username: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:username: %s", p, err)
	}
	return err
}

func (p *AuthenticateArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:password: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
		return fmt.Errorf("%T.password (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 2:password: %s", p, err)
	}
	return err
}

func (p *AuthenticateArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "consumerKey", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:consumerKey: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.ConsumerKey)); err != nil {
		return fmt.Errorf("%T.consumerKey (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 3:consumerKey: %s", p, err)
	}
	return err
}

func (p *AuthenticateArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "consumerSecret", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:consumerSecret: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.ConsumerSecret)); err != nil {
		return fmt.Errorf("%T.consumerSecret (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 4:consumerSecret: %s", p, err)
	}
	return err
}

func (p *AuthenticateArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "supportsTwoFactor", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:supportsTwoFactor: %s", p, err)
	}
	if err := oprot.WriteBool(ctx, bool(p.SupportsTwoFactor)); err != nil {
		return fmt.Errorf("%T.supportsTwoFactor (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 5:supportsTwoFactor: %s", p, err)
	}
	return err
}

func (p *AuthenticateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticateArgs(%+v)", *p)
}

type AuthenticateResult struct {
	Success         *AuthenticationResult       `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewAuthenticateResult() *AuthenticateResult {
	return &AuthenticateResult{}
}

func (p *AuthenticateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(ctx, iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthenticateResult) readField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = NewAuthenticationResult()
	if err := p.Success.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *AuthenticateResult) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *AuthenticateResult) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *AuthenticateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "authenticate_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthenticateResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin(ctx, "userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin(ctx, "systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticateResult(%+v)", *p)
}

type AuthenticateLongSessionArgs struct {
	Username          string `thrift:"username,1"`
	Password          string `thrift:"password,2"`
	ConsumerKey       string `thrift:"consumerKey,3"`
	ConsumerSecret    string `thrift:"consumerSecret,4"`
	DeviceIdentifier  string `thrift:"deviceIdentifier,5"`
	DeviceDescription string `thrift:"deviceDescription,6"`
	SupportsTwoFactor bool   `thrift:"supportsTwoFactor,7"`
}

func NewAuthenticateLongSessionArgs() *AuthenticateLongSessionArgs {
	return &AuthenticateLongSessionArgs{}
}

func (p *AuthenticateLongSessionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(ctx, iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(ctx, iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(ctx, iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(ctx, iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthenticateLongSessionArgs) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *AuthenticateLongSessionArgs) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Password = v
	}
	return nil
}

func (p *AuthenticateLongSessionArgs) readField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ConsumerKey = v
	}
	return nil
}

func (p *AuthenticateLongSessionArgs) readField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.ConsumerSecret = v
	}
	return nil
}

func (p *AuthenticateLongSessionArgs) readField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.DeviceIdentifier = v
	}
	return nil
}

func (p *AuthenticateLongSessionArgs) readField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.DeviceDescription = v
	}
	return nil
}

func (p *AuthenticateLongSessionArgs) readField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.SupportsTwoFactor = v
	}
	return nil
}

func (p *AuthenticateLongSessionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "authenticateLongSession_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField2(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField3(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField4(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField5(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField6(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField7(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthenticateLongSessionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:username: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:username: %s", p, err)
	}
	return err
}

func (p *AuthenticateLongSessionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:password: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
		return fmt.Errorf("%T.password (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 2:password: %s", p, err)
	}
	return err
}

func (p *AuthenticateLongSessionArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "consumerKey", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:consumerKey: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.ConsumerKey)); err != nil {
		return fmt.Errorf("%T.consumerKey (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 3:consumerKey: %s", p, err)
	}
	return err
}

func (p *AuthenticateLongSessionArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "consumerSecret", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:consumerSecret: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.ConsumerSecret)); err != nil {
		return fmt.Errorf("%T.consumerSecret (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 4:consumerSecret: %s", p, err)
	}
	return err
}

func (p *AuthenticateLongSessionArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "deviceIdentifier", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:deviceIdentifier: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.DeviceIdentifier)); err != nil {
		return fmt.Errorf("%T.deviceIdentifier (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 5:deviceIdentifier: %s", p, err)
	}
	return err
}

func (p *AuthenticateLongSessionArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "deviceDescription", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:deviceDescription: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.DeviceDescription)); err != nil {
		return fmt.Errorf("%T.deviceDescription (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 6:deviceDescription: %s", p, err)
	}
	return err
}

func (p *AuthenticateLongSessionArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "supportsTwoFactor", thrift.BOOL, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:supportsTwoFactor: %s", p, err)
	}
	if err := oprot.WriteBool(ctx, bool(p.SupportsTwoFactor)); err != nil {
		return fmt.Errorf("%T.supportsTwoFactor (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 7:supportsTwoFactor: %s", p, err)
	}
	return err
}

func (p *AuthenticateLongSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticateLongSessionArgs(%+v)", *p)
}

type AuthenticateLongSessionResult struct {
	Success         *AuthenticationResult       `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewAuthenticateLongSessionResult() *AuthenticateLongSessionResult {
	return &AuthenticateLongSessionResult{}
}

func (p *AuthenticateLongSessionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(ctx, iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthenticateLongSessionResult) readField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = NewAuthenticationResult()
	if err := p.Success.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *AuthenticateLongSessionResult) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *AuthenticateLongSessionResult) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *AuthenticateLongSessionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "authenticateLongSession_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthenticateLongSessionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateLongSessionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin(ctx, "userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateLongSessionResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin(ctx, "systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateLongSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticateLongSessionResult(%+v)", *p)
}

type CompleteTwoFactorAuthenticationArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
	OneTimeCode         string `thrift:"oneTimeCode,2"`
	DeviceIdentifier    string `thrift:"deviceIdentifier,3"`
	DeviceDescription   string `thrift:"deviceDescription,4"`
}

func NewCompleteTwoFactorAuthenticationArgs() *CompleteTwoFactorAuthenticationArgs {
	return &CompleteTwoFactorAuthenticationArgs{}
}

func (p *CompleteTwoFactorAuthenticationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(ctx, iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CompleteTwoFactorAuthenticationArgs) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *CompleteTwoFactorAuthenticationArgs) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.OneTimeCode = v
	}
	return nil
}

func (p *CompleteTwoFactorAuthenticationArgs) readField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.DeviceIdentifier = v
	}
	return nil
}

func (p *CompleteTwoFactorAuthenticationArgs) readField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.DeviceDescription = v
	}
	return nil
}

func (p *CompleteTwoFactorAuthenticationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "completeTwoFactorAuthentication_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField2(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField3(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField4(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CompleteTwoFactorAuthenticationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *CompleteTwoFactorAuthenticationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "oneTimeCode", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:oneTimeCode: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.OneTimeCode)); err != nil {
		return fmt.Errorf("%T.oneTimeCode (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 2:oneTimeCode: %s", p, err)
	}
	return err
}

func (p *CompleteTwoFactorAuthenticationArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "deviceIdentifier", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:deviceIdentifier: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.DeviceIdentifier)); err != nil {
		return fmt.Errorf("%T.deviceIdentifier (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 3:deviceIdentifier: %s", p, err)
	}
	return err
}

func (p *CompleteTwoFactorAuthenticationArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "deviceDescription", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deviceDescription: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.DeviceDescription)); err != nil {
		return fmt.Errorf("%T.deviceDescription (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 4:deviceDescription: %s", p, err)
	}
	return err
}

func (p *CompleteTwoFactorAuthenticationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompleteTwoFactorAuthenticationArgs(%+v)", *p)
}

type CompleteTwoFactorAuthenticationResult struct {
	Success         *AuthenticationResult       `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewCompleteTwoFactorAuthenticationResult() *CompleteTwoFactorAuthenticationResult {
	return &CompleteTwoFactorAuthenticationResult{}
}

func (p *CompleteTwoFactorAuthenticationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(ctx, iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CompleteTwoFactorAuthenticationResult) readField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = NewAuthenticationResult()
	if err := p.Success.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *CompleteTwoFactorAuthenticationResult) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *CompleteTwoFactorAuthenticationResult) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *CompleteTwoFactorAuthenticationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "completeTwoFactorAuthentication_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CompleteTwoFactorAuthenticationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CompleteTwoFactorAuthenticationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin(ctx, "userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *CompleteTwoFactorAuthenticationResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin(ctx, "systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *CompleteTwoFactorAuthenticationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompleteTwoFactorAuthenticationResult(%+v)", *p)
}

type RevokeLongSessionArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewRevokeLongSessionArgs() *RevokeLongSessionArgs {
	return &RevokeLongSessionArgs{}
}

func (p *RevokeLongSessionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokeLongSessionArgs) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *RevokeLongSessionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "revokeLongSession_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokeLongSessionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *RevokeLongSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeLongSessionArgs(%+v)", *p)
}

type RevokeLongSessionResult struct {
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewRevokeLongSessionResult() *RevokeLongSessionResult {
	return &RevokeLongSessionResult{}
}

func (p *RevokeLongSessionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokeLongSessionResult) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *RevokeLongSessionResult) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *RevokeLongSessionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "revokeLongSession_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokeLongSessionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin(ctx, "userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *RevokeLongSessionResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin(ctx, "systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *RevokeLongSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeLongSessionResult(%+v)", *p)
}

type AuthenticateToBusinessArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewAuthenticateToBusinessArgs() *AuthenticateToBusinessArgs {
	return &AuthenticateToBusinessArgs{}
}

func (p *AuthenticateToBusinessArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthenticateToBusinessArgs) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *AuthenticateToBusinessArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "authenticateToBusiness_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthenticateToBusinessArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *AuthenticateToBusinessArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticateToBusinessArgs(%+v)", *p)
}

type AuthenticateToBusinessResult struct {
	Success         *AuthenticationResult       `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewAuthenticateToBusinessResult() *AuthenticateToBusinessResult {
	return &AuthenticateToBusinessResult{}
}

func (p *AuthenticateToBusinessResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(ctx, iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthenticateToBusinessResult) readField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = NewAuthenticationResult()
	if err := p.Success.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *AuthenticateToBusinessResult) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *AuthenticateToBusinessResult) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *AuthenticateToBusinessResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "authenticateToBusiness_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthenticateToBusinessResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateToBusinessResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin(ctx, "userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateToBusinessResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin(ctx, "systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateToBusinessResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticateToBusinessResult(%+v)", *p)
}

type RefreshAuthenticationArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewRefreshAuthenticationArgs() *RefreshAuthenticationArgs {
	return &RefreshAuthenticationArgs{}
}

func (p *RefreshAuthenticationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RefreshAuthenticationArgs) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *RefreshAuthenticationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "refreshAuthentication_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RefreshAuthenticationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *RefreshAuthenticationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshAuthenticationArgs(%+v)", *p)
}

type RefreshAuthenticationResult struct {
	Success         *AuthenticationResult       `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewRefreshAuthenticationResult() *RefreshAuthenticationResult {
	return &RefreshAuthenticationResult{}
}

func (p *RefreshAuthenticationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(ctx, iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RefreshAuthenticationResult) readField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = NewAuthenticationResult()
	if err := p.Success.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *RefreshAuthenticationResult) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *RefreshAuthenticationResult) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *RefreshAuthenticationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "refreshAuthentication_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RefreshAuthenticationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RefreshAuthenticationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin(ctx, "userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *RefreshAuthenticationResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin(ctx, "systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *RefreshAuthenticationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshAuthenticationResult(%+v)", *p)
}

type GetUserArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewGetUserArgs() *GetUserArgs {
	return &GetUserArgs{}
}

func (p *GetUserArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserArgs) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetUserArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getUser_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserArgs(%+v)", *p)
}

type GetUserResult struct {
	Success         *Types.User                 `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewGetUserResult() *GetUserResult {
	return &GetUserResult{}
}

func (p *GetUserResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(ctx, iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserResult) readField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = Types.NewUser()
	if err := p.Success.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetUserResult) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetUserResult) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetUserResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getUser_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetUserResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin(ctx, "userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetUserResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin(ctx, "systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserResult(%+v)", *p)
}

type GetPublicUserInfoArgs struct {
	Username string `thrift:"username,1"`
}

func NewGetPublicUserInfoArgs() *GetPublicUserInfoArgs {
	return &GetPublicUserInfoArgs{}
}

func (p *GetPublicUserInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPublicUserInfoArgs) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *GetPublicUserInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPublicUserInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPublicUserInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:username: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:username: %s", p, err)
	}
	return err
}

func (p *GetPublicUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPublicUserInfoArgs(%+v)", *p)
}

type GetPublicUserInfoResult struct {
	Success           *PublicUserInfo               `thrift:"success,0"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,3"`
}

func NewGetPublicUserInfoResult() *GetPublicUserInfoResult {
	return &GetPublicUserInfoResult{}
}

func (p *GetPublicUserInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(ctx, iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPublicUserInfoResult) readField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = NewPublicUserInfo()
	if err := p.Success.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetPublicUserInfoResult) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetPublicUserInfoResult) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetPublicUserInfoResult) readField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetPublicUserInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPublicUserInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.UserException != nil:
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPublicUserInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPublicUserInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin(ctx, "notFoundException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 1:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetPublicUserInfoResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin(ctx, "systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetPublicUserInfoResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin(ctx, "userException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:userException: %s", p, err)
		}
		if err := p.UserException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 3:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetPublicUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPublicUserInfoResult(%+v)", *p)
}

type GetPremiumInfoArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewGetPremiumInfoArgs() *GetPremiumInfoArgs {
	return &GetPremiumInfoArgs{}
}

func (p *GetPremiumInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPremiumInfoArgs) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetPremiumInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPremiumInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPremiumInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetPremiumInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPremiumInfoArgs(%+v)", *p)
}

type GetPremiumInfoResult struct {
	Success         *Types.PremiumInfo          `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewGetPremiumInfoResult() *GetPremiumInfoResult {
	return &GetPremiumInfoResult{}
}

func (p *GetPremiumInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(ctx, iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPremiumInfoResult) readField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = Types.NewPremiumInfo()
	if err := p.Success.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetPremiumInfoResult) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetPremiumInfoResult) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetPremiumInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPremiumInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPremiumInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPremiumInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin(ctx, "userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetPremiumInfoResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin(ctx, "systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetPremiumInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPremiumInfoResult(%+v)", *p)
}

type GetNoteStoreUrlArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewGetNoteStoreUrlArgs() *GetNoteStoreUrlArgs {
	return &GetNoteStoreUrlArgs{}
}

func (p *GetNoteStoreUrlArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteStoreUrlArgs) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetNoteStoreUrlArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getNoteStoreUrl_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteStoreUrlArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetNoteStoreUrlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteStoreUrlArgs(%+v)", *p)
}

type GetNoteStoreUrlResult struct {
	Success         string                      `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewGetNoteStoreUrlResult() *GetNoteStoreUrlResult {
	return &GetNoteStoreUrlResult{}
}

func (p *GetNoteStoreUrlResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(ctx, iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteStoreUrlResult) readField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetNoteStoreUrlResult) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetNoteStoreUrlResult) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetNoteStoreUrlResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getNoteStoreUrl_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteStoreUrlResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetNoteStoreUrlResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin(ctx, "userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteStoreUrlResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin(ctx, "systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteStoreUrlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteStoreUrlResult(%+v)", *p)
}
