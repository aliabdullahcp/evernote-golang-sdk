// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package UserStore

import (
	"context"
	"fmt"
	"github.com/aliabdullahcp/evernote-golang-sdk/Errors"
	"github.com/aliabdullahcp/evernote-golang-sdk/Types"
	"github.com/apache/thrift/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = Types.GoUnusedProtection__
var _ = Errors.GoUnusedProtection__
var GoUnusedProtection__ int

type PublicUserInfo struct {
	UserId          Types.UserID         `thrift:"userId,1,required"`
	ShardId         string               `thrift:"shardId,2,required"`
	Privilege       Types.PrivilegeLevel `thrift:"privilege,3"`
	Username        string               `thrift:"username,4"`
	NoteStoreUrl    string               `thrift:"noteStoreUrl,5"`
	WebApiUrlPrefix string               `thrift:"webApiUrlPrefix,6"`
}

func NewPublicUserInfo() *PublicUserInfo {
	return &PublicUserInfo{
		Privilege: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *PublicUserInfo) IsSetPrivilege() bool {
	return int64(p.Privilege) != math.MinInt32-1
}

func (p *PublicUserInfo) IsSetUsername() bool {
	return p.Username != ""
}

func (p *PublicUserInfo) IsSetNoteStoreUrl() bool {
	return p.NoteStoreUrl != ""
}

func (p *PublicUserInfo) IsSetWebApiUrlPrefix() bool {
	return p.WebApiUrlPrefix != ""
}

func (p *PublicUserInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(ctx, iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(ctx, iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(ctx, iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PublicUserInfo) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.UserId = Types.UserID(v)
	}
	return nil
}

func (p *PublicUserInfo) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ShardId = v
	}
	return nil
}

func (p *PublicUserInfo) readField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Privilege = Types.PrivilegeLevel(v)
	}
	return nil
}

func (p *PublicUserInfo) readField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *PublicUserInfo) readField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.NoteStoreUrl = v
	}
	return nil
}

func (p *PublicUserInfo) readField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.WebApiUrlPrefix = v
	}
	return nil
}

func (p *PublicUserInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PublicUserInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField2(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField3(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField4(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField5(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField6(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *PublicUserInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "userId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:userId: %s", p, err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.userId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:userId: %s", p, err)
	}
	return err
}

func (p *PublicUserInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "shardId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:shardId: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.ShardId)); err != nil {
		return fmt.Errorf("%T.shardId (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 2:shardId: %s", p, err)
	}
	return err
}

func (p *PublicUserInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin(ctx, "privilege", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:privilege: %s", p, err)
		}
		if err := oprot.WriteI32(ctx, int32(p.Privilege)); err != nil {
			return fmt.Errorf("%T.privilege (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 3:privilege: %s", p, err)
		}
	}
	return err
}

func (p *PublicUserInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:username: %s", p, err)
		}
		if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
			return fmt.Errorf("%T.username (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 4:username: %s", p, err)
		}
	}
	return err
}

func (p *PublicUserInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteStoreUrl() {
		if err := oprot.WriteFieldBegin(ctx, "noteStoreUrl", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:noteStoreUrl: %s", p, err)
		}
		if err := oprot.WriteString(ctx, string(p.NoteStoreUrl)); err != nil {
			return fmt.Errorf("%T.noteStoreUrl (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 5:noteStoreUrl: %s", p, err)
		}
	}
	return err
}

func (p *PublicUserInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWebApiUrlPrefix() {
		if err := oprot.WriteFieldBegin(ctx, "webApiUrlPrefix", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:webApiUrlPrefix: %s", p, err)
		}
		if err := oprot.WriteString(ctx, string(p.WebApiUrlPrefix)); err != nil {
			return fmt.Errorf("%T.webApiUrlPrefix (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 6:webApiUrlPrefix: %s", p, err)
		}
	}
	return err
}

func (p *PublicUserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublicUserInfo(%+v)", *p)
}

type AuthenticationResult struct {
	CurrentTime              Types.Timestamp `thrift:"currentTime,1,required"`
	AuthenticationToken      string          `thrift:"authenticationToken,2,required"`
	Expiration               Types.Timestamp `thrift:"expiration,3,required"`
	User                     *Types.User     `thrift:"user,4"`
	PublicUserInfo           *PublicUserInfo `thrift:"publicUserInfo,5"`
	NoteStoreUrl             string          `thrift:"noteStoreUrl,6"`
	WebApiUrlPrefix          string          `thrift:"webApiUrlPrefix,7"`
	SecondFactorRequired     bool            `thrift:"secondFactorRequired,8"`
	SecondFactorDeliveryHint string          `thrift:"secondFactorDeliveryHint,9"`
}

func NewAuthenticationResult() *AuthenticationResult {
	return &AuthenticationResult{}
}

func (p *AuthenticationResult) IsSetUser() bool {
	return p.User != nil
}

func (p *AuthenticationResult) IsSetPublicUserInfo() bool {
	return p.PublicUserInfo != nil
}

func (p *AuthenticationResult) IsSetNoteStoreUrl() bool {
	return p.NoteStoreUrl != ""
}

func (p *AuthenticationResult) IsSetWebApiUrlPrefix() bool {
	return p.WebApiUrlPrefix != ""
}

func (p *AuthenticationResult) IsSetSecondFactorRequired() bool {
	return p.SecondFactorRequired != false
}

func (p *AuthenticationResult) IsSetSecondFactorDeliveryHint() bool {
	return p.SecondFactorDeliveryHint != ""
}

func (p *AuthenticationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(ctx, iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(ctx, iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(ctx, iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(ctx, iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(ctx, iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(ctx, iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthenticationResult) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.CurrentTime = Types.Timestamp(v)
	}
	return nil
}

func (p *AuthenticationResult) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *AuthenticationResult) readField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Expiration = Types.Timestamp(v)
	}
	return nil
}

func (p *AuthenticationResult) readField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.User = Types.NewUser()
	if err := p.User.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.User)
	}
	return nil
}

func (p *AuthenticationResult) readField5(ctx context.Context, iprot thrift.TProtocol) error {
	p.PublicUserInfo = NewPublicUserInfo()
	if err := p.PublicUserInfo.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PublicUserInfo)
	}
	return nil
}

func (p *AuthenticationResult) readField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.NoteStoreUrl = v
	}
	return nil
}

func (p *AuthenticationResult) readField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.WebApiUrlPrefix = v
	}
	return nil
}

func (p *AuthenticationResult) readField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.SecondFactorRequired = v
	}
	return nil
}

func (p *AuthenticationResult) readField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.SecondFactorDeliveryHint = v
	}
	return nil
}

func (p *AuthenticationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AuthenticationResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField2(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField3(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField4(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField5(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField6(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField7(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField8(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField9(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthenticationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "currentTime", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:currentTime: %s", p, err)
	}
	if err := oprot.WriteI64(ctx, int64(p.CurrentTime)); err != nil {
		return fmt.Errorf("%T.currentTime (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:currentTime: %s", p, err)
	}
	return err
}

func (p *AuthenticationResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "authenticationToken", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 2:authenticationToken: %s", p, err)
	}
	return err
}

func (p *AuthenticationResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "expiration", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:expiration: %s", p, err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Expiration)); err != nil {
		return fmt.Errorf("%T.expiration (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 3:expiration: %s", p, err)
	}
	return err
}

func (p *AuthenticationResult) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.User != nil {
		if p.IsSetUser() {
			if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRUCT, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:user: %s", p, err)
			}
			if err := p.User.Write(ctx, oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.User)
			}
			if err := oprot.WriteFieldEnd(ctx); err != nil {
				return fmt.Errorf("%T write field end error 4:user: %s", p, err)
			}
		}
	}
	return err
}

func (p *AuthenticationResult) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.PublicUserInfo != nil {
		if p.IsSetPublicUserInfo() {
			if err := oprot.WriteFieldBegin(ctx, "publicUserInfo", thrift.STRUCT, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:publicUserInfo: %s", p, err)
			}
			if err := p.PublicUserInfo.Write(ctx, oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.PublicUserInfo)
			}
			if err := oprot.WriteFieldEnd(ctx); err != nil {
				return fmt.Errorf("%T write field end error 5:publicUserInfo: %s", p, err)
			}
		}
	}
	return err
}

func (p *AuthenticationResult) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteStoreUrl() {
		if err := oprot.WriteFieldBegin(ctx, "noteStoreUrl", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:noteStoreUrl: %s", p, err)
		}
		if err := oprot.WriteString(ctx, string(p.NoteStoreUrl)); err != nil {
			return fmt.Errorf("%T.noteStoreUrl (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 6:noteStoreUrl: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticationResult) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWebApiUrlPrefix() {
		if err := oprot.WriteFieldBegin(ctx, "webApiUrlPrefix", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:webApiUrlPrefix: %s", p, err)
		}
		if err := oprot.WriteString(ctx, string(p.WebApiUrlPrefix)); err != nil {
			return fmt.Errorf("%T.webApiUrlPrefix (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 7:webApiUrlPrefix: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticationResult) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSecondFactorRequired() {
		if err := oprot.WriteFieldBegin(ctx, "secondFactorRequired", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:secondFactorRequired: %s", p, err)
		}
		if err := oprot.WriteBool(ctx, bool(p.SecondFactorRequired)); err != nil {
			return fmt.Errorf("%T.secondFactorRequired (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 8:secondFactorRequired: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticationResult) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSecondFactorDeliveryHint() {
		if err := oprot.WriteFieldBegin(ctx, "secondFactorDeliveryHint", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:secondFactorDeliveryHint: %s", p, err)
		}
		if err := oprot.WriteString(ctx, string(p.SecondFactorDeliveryHint)); err != nil {
			return fmt.Errorf("%T.secondFactorDeliveryHint (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 9:secondFactorDeliveryHint: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticationResult(%+v)", *p)
}

type BootstrapSettings struct {
	ServiceHost             string `thrift:"serviceHost,1,required"`
	MarketingUrl            string `thrift:"marketingUrl,2,required"`
	SupportUrl              string `thrift:"supportUrl,3,required"`
	AccountEmailDomain      string `thrift:"accountEmailDomain,4,required"`
	EnableFacebookSharing   bool   `thrift:"enableFacebookSharing,5"`
	EnableGiftSubscriptions bool   `thrift:"enableGiftSubscriptions,6"`
	EnableSupportTickets    bool   `thrift:"enableSupportTickets,7"`
	EnableSharedNotebooks   bool   `thrift:"enableSharedNotebooks,8"`
	EnableSingleNoteSharing bool   `thrift:"enableSingleNoteSharing,9"`
	EnableSponsoredAccounts bool   `thrift:"enableSponsoredAccounts,10"`
	EnableTwitterSharing    bool   `thrift:"enableTwitterSharing,11"`
	EnableLinkedInSharing   bool   `thrift:"enableLinkedInSharing,12"`
	EnablePublicNotebooks   bool   `thrift:"enablePublicNotebooks,13"`
}

func NewBootstrapSettings() *BootstrapSettings {
	return &BootstrapSettings{}
}

func (p *BootstrapSettings) IsSetEnableFacebookSharing() bool {
	return p.EnableFacebookSharing != false
}

func (p *BootstrapSettings) IsSetEnableGiftSubscriptions() bool {
	return p.EnableGiftSubscriptions != false
}

func (p *BootstrapSettings) IsSetEnableSupportTickets() bool {
	return p.EnableSupportTickets != false
}

func (p *BootstrapSettings) IsSetEnableSharedNotebooks() bool {
	return p.EnableSharedNotebooks != false
}

func (p *BootstrapSettings) IsSetEnableSingleNoteSharing() bool {
	return p.EnableSingleNoteSharing != false
}

func (p *BootstrapSettings) IsSetEnableSponsoredAccounts() bool {
	return p.EnableSponsoredAccounts != false
}

func (p *BootstrapSettings) IsSetEnableTwitterSharing() bool {
	return p.EnableTwitterSharing != false
}

func (p *BootstrapSettings) IsSetEnableLinkedInSharing() bool {
	return p.EnableLinkedInSharing != false
}

func (p *BootstrapSettings) IsSetEnablePublicNotebooks() bool {
	return p.EnablePublicNotebooks != false
}

func (p *BootstrapSettings) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(ctx, iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(ctx, iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(ctx, iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(ctx, iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(ctx, iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(ctx, iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(ctx, iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(ctx, iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(ctx, iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(ctx, iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BootstrapSettings) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ServiceHost = v
	}
	return nil
}

func (p *BootstrapSettings) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.MarketingUrl = v
	}
	return nil
}

func (p *BootstrapSettings) readField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.SupportUrl = v
	}
	return nil
}

func (p *BootstrapSettings) readField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.AccountEmailDomain = v
	}
	return nil
}

func (p *BootstrapSettings) readField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.EnableFacebookSharing = v
	}
	return nil
}

func (p *BootstrapSettings) readField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.EnableGiftSubscriptions = v
	}
	return nil
}

func (p *BootstrapSettings) readField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.EnableSupportTickets = v
	}
	return nil
}

func (p *BootstrapSettings) readField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.EnableSharedNotebooks = v
	}
	return nil
}

func (p *BootstrapSettings) readField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.EnableSingleNoteSharing = v
	}
	return nil
}

func (p *BootstrapSettings) readField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.EnableSponsoredAccounts = v
	}
	return nil
}

func (p *BootstrapSettings) readField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.EnableTwitterSharing = v
	}
	return nil
}

func (p *BootstrapSettings) readField12(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.EnableLinkedInSharing = v
	}
	return nil
}

func (p *BootstrapSettings) readField13(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.EnablePublicNotebooks = v
	}
	return nil
}

func (p *BootstrapSettings) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BootstrapSettings"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField2(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField3(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField4(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField5(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField6(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField7(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField8(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField9(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField10(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField11(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField12(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField13(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *BootstrapSettings) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "serviceHost", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:serviceHost: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.ServiceHost)); err != nil {
		return fmt.Errorf("%T.serviceHost (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:serviceHost: %s", p, err)
	}
	return err
}

func (p *BootstrapSettings) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "marketingUrl", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:marketingUrl: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.MarketingUrl)); err != nil {
		return fmt.Errorf("%T.marketingUrl (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 2:marketingUrl: %s", p, err)
	}
	return err
}

func (p *BootstrapSettings) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "supportUrl", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:supportUrl: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.SupportUrl)); err != nil {
		return fmt.Errorf("%T.supportUrl (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 3:supportUrl: %s", p, err)
	}
	return err
}

func (p *BootstrapSettings) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "accountEmailDomain", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:accountEmailDomain: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.AccountEmailDomain)); err != nil {
		return fmt.Errorf("%T.accountEmailDomain (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 4:accountEmailDomain: %s", p, err)
	}
	return err
}

func (p *BootstrapSettings) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableFacebookSharing() {
		if err := oprot.WriteFieldBegin(ctx, "enableFacebookSharing", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:enableFacebookSharing: %s", p, err)
		}
		if err := oprot.WriteBool(ctx, bool(p.EnableFacebookSharing)); err != nil {
			return fmt.Errorf("%T.enableFacebookSharing (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 5:enableFacebookSharing: %s", p, err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableGiftSubscriptions() {
		if err := oprot.WriteFieldBegin(ctx, "enableGiftSubscriptions", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:enableGiftSubscriptions: %s", p, err)
		}
		if err := oprot.WriteBool(ctx, bool(p.EnableGiftSubscriptions)); err != nil {
			return fmt.Errorf("%T.enableGiftSubscriptions (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 6:enableGiftSubscriptions: %s", p, err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSupportTickets() {
		if err := oprot.WriteFieldBegin(ctx, "enableSupportTickets", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:enableSupportTickets: %s", p, err)
		}
		if err := oprot.WriteBool(ctx, bool(p.EnableSupportTickets)); err != nil {
			return fmt.Errorf("%T.enableSupportTickets (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 7:enableSupportTickets: %s", p, err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSharedNotebooks() {
		if err := oprot.WriteFieldBegin(ctx, "enableSharedNotebooks", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:enableSharedNotebooks: %s", p, err)
		}
		if err := oprot.WriteBool(ctx, bool(p.EnableSharedNotebooks)); err != nil {
			return fmt.Errorf("%T.enableSharedNotebooks (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 8:enableSharedNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSingleNoteSharing() {
		if err := oprot.WriteFieldBegin(ctx, "enableSingleNoteSharing", thrift.BOOL, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:enableSingleNoteSharing: %s", p, err)
		}
		if err := oprot.WriteBool(ctx, bool(p.EnableSingleNoteSharing)); err != nil {
			return fmt.Errorf("%T.enableSingleNoteSharing (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 9:enableSingleNoteSharing: %s", p, err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSponsoredAccounts() {
		if err := oprot.WriteFieldBegin(ctx, "enableSponsoredAccounts", thrift.BOOL, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:enableSponsoredAccounts: %s", p, err)
		}
		if err := oprot.WriteBool(ctx, bool(p.EnableSponsoredAccounts)); err != nil {
			return fmt.Errorf("%T.enableSponsoredAccounts (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 10:enableSponsoredAccounts: %s", p, err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableTwitterSharing() {
		if err := oprot.WriteFieldBegin(ctx, "enableTwitterSharing", thrift.BOOL, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:enableTwitterSharing: %s", p, err)
		}
		if err := oprot.WriteBool(ctx, bool(p.EnableTwitterSharing)); err != nil {
			return fmt.Errorf("%T.enableTwitterSharing (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 11:enableTwitterSharing: %s", p, err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableLinkedInSharing() {
		if err := oprot.WriteFieldBegin(ctx, "enableLinkedInSharing", thrift.BOOL, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:enableLinkedInSharing: %s", p, err)
		}
		if err := oprot.WriteBool(ctx, bool(p.EnableLinkedInSharing)); err != nil {
			return fmt.Errorf("%T.enableLinkedInSharing (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 12:enableLinkedInSharing: %s", p, err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEnablePublicNotebooks() {
		if err := oprot.WriteFieldBegin(ctx, "enablePublicNotebooks", thrift.BOOL, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:enablePublicNotebooks: %s", p, err)
		}
		if err := oprot.WriteBool(ctx, bool(p.EnablePublicNotebooks)); err != nil {
			return fmt.Errorf("%T.enablePublicNotebooks (13) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 13:enablePublicNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *BootstrapSettings) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BootstrapSettings(%+v)", *p)
}

type BootstrapProfile struct {
	Name     string             `thrift:"name,1,required"`
	Settings *BootstrapSettings `thrift:"settings,2,required"`
}

func NewBootstrapProfile() *BootstrapProfile {
	return &BootstrapProfile{}
}

func (p *BootstrapProfile) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BootstrapProfile) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *BootstrapProfile) readField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Settings = NewBootstrapSettings()
	if err := p.Settings.Read(ctx, iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Settings)
	}
	return nil
}

func (p *BootstrapProfile) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BootstrapProfile"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := p.writeField2(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *BootstrapProfile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *BootstrapProfile) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.Settings != nil {
		if err := oprot.WriteFieldBegin(ctx, "settings", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:settings: %s", p, err)
		}
		if err := p.Settings.Write(ctx, oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Settings)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 2:settings: %s", p, err)
		}
	}
	return err
}

func (p *BootstrapProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BootstrapProfile(%+v)", *p)
}

type BootstrapInfo struct {
	Profiles []*BootstrapProfile `thrift:"profiles,1,required"`
}

func NewBootstrapInfo() *BootstrapInfo {
	return &BootstrapInfo{}
}

func (p *BootstrapInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(ctx, iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BootstrapInfo) readField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Profiles = make([]*BootstrapProfile, 0, size)
	for i := 0; i < size; i++ {
		_elem0 := NewBootstrapProfile()
		if err := _elem0.Read(ctx, iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0)
		}
		p.Profiles = append(p.Profiles, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *BootstrapInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BootstrapInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(ctx, oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *BootstrapInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.Profiles != nil {
		if err := oprot.WriteFieldBegin(ctx, "profiles", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:profiles: %s", p, err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Profiles)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Profiles {
			if err := v.Write(ctx, oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return fmt.Errorf("%T write field end error 1:profiles: %s", p, err)
		}
	}
	return err
}

func (p *BootstrapInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BootstrapInfo(%+v)", *p)
}
